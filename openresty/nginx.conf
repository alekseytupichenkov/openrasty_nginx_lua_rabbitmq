worker_processes  1;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile           on;
    keepalive_timeout  65;

    gzip  on;

    server {
        listen       80;
        server_name  localhost;

        resolver rabbitmq valid=10s;

        location / {
            return 403;
        }

        location = /rabbitmq {
            resolver 127.0.0.11;
            default_type application/json;
            add_header Allow "POST" always;
            if ( $request_method !~ ^POST$ ) {
                return 405;
            }

            content_by_lua '
                local strlen =  string.len
                local cjson = require "cjson"
                local rabbitmq = require "resty.rabbitmqstomp"
                local opts = {
                    username = "guest",
                    password = "guest",
                    vhost = "/"
                }

                local mq, err = rabbitmq:new(opts)

                if not mq then
                    ngx.say("{\'status\': \'error\', \'message\': \'failed to create rabbitmq instance\'}")
                    return
                end

                mq:set_timeout(10000) -- 1 sec

                local ok, err = mq:connect("rabbitmq",61613)
                if not ok then
                    ngx.say("{\'status\': \'error\', \'message\': \'failed to connect\'}")
                    return
                end

                ngx.req.read_body()
                local data = ngx.req.get_body_data()
                local headers = {}
                headers["destination"] = "/exchange/amq.direct/message"
                headers["persistent"] = "true"
                headers["content-type"] = "application/json"

                local ok, err = mq:send(data, headers)
                if not ok then
                    ngx.say("{\'status\': \'error\', \'message\': \'failed to publish message\'}")
                    return
                end

                ngx.say("{\'status\': \'ok\'}")
            ';
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
